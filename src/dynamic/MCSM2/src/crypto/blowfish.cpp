#include <inttypes.h>
#include <stddef.h>

namespace TTH
{
namespace Blowfish
{

constexpr uint32_t pArray[18] = {
    0x2B2D2B51, 0x2123B2A9, 0xD15E0AD2, 0xAF397E8E, 0xF34A5957, 0x129977F2, 0xC1E66675, 0x224FAF53, 0x236A5B9D,
    0x80D7FB5D, 0xD8C66082, 0x6E4351BA, 0x312697B5, 0x28A0E1A5, 0x2D14475D, 0xBE95CA61, 0x929C025F, 0x800BBC2E,
};

constexpr uint32_t sbox[4][256] = {
    {
        0xC3949CA4, 0xA82AD18B, 0xA40DED3A, 0x8C59B476, 0x50ED09B5, 0x385884D8, 0x396BDA76, 0x23E253E7, 0xC3424358, 0x5381397C, 0x89CC4B59, 0x5970C30C, 0x30D83DD8, 0xB8BF6C93, 0x51F43849, 0xE1BA1E32,
        0x15240D4D, 0x58493376, 0x28E91510, 0xDD503AC0, 0xE016D045, 0x62BA61D5, 0xDFDB2362, 0x507FDA16, 0xBE97145C, 0x42994F1D, 0x2C6988C8, 0xD7DA94CE, 0xE89EAFEE, 0x9821D991, 0x46D27786, 0x143E7012,
        0x0AB7D95F, 0x9C675F05, 0x68E9DB8E, 0x9EDE61E9, 0xE54F1964, 0x6735F32F, 0x01DCBED6, 0xB345EE5C, 0x213DCD58, 0x9D1EE6A5, 0x189CE4E9, 0x394FAC2C, 0xBF985E16, 0x79756AF5, 0x85FD3CD4, 0xEDC43AC8,
        0x7C078A50, 0x157E9322, 0x62F19343, 0xF6B5041E, 0xBBCE8F79, 0xBA296C40, 0x1547835E, 0x43CDECEC, 0xE9E5E2DE, 0x27D5D9FC, 0x3D73182D, 0xB2BD3306, 0x0CD7488B, 0x59472E5F, 0xDC731A11, 0x1737112C,
        0xA6FBE807, 0xDB4431B0, 0xDB9C2611, 0xF57F8479, 0xDC217E36, 0x87D3CAC4, 0x42EC0995, 0x33DFBF71, 0x6266D679, 0xB5C9FC7D, 0xD499C190, 0x7A9898EF, 0x7515AD8C, 0xEC93D839, 0x30ABF799, 0x1ABDFB0B,
        0x666979C6, 0x5A2B1528, 0xBADFA4BA, 0x7B28BDEA, 0x5ED53388, 0x0B8F4E03, 0xB626987F, 0x1373B79B, 0xDCBBF920, 0x1217A8AE, 0x7292FA02, 0x0EC863CD, 0x42461E41, 0x793BE4FB, 0xC0A9C956, 0x8D5B9DBB,
        0xDE189DA6, 0xF896E01F, 0x5F1F57E2, 0x90070ADD, 0x6630A923, 0x93C9F09F, 0x8F57A5B2, 0x1B4169D6, 0x76DDECF7, 0xF637F0AD, 0x63844028, 0x7526C548, 0x5375AAC9, 0x4BF51895, 0xC7425455, 0x7E78A470,
        0x654BA376, 0xAE2F7208, 0xFA5F8822, 0x1C6EC7F4, 0xFB1B2782, 0x28E2D662, 0x1239B006, 0x477740C2, 0xE1FAF986, 0x9E97AC67, 0x5D999EB9, 0x7E672F12, 0x99852207, 0xC366CAF1, 0xC59AE464, 0xB629CDC8,
        0xC0F5B43A, 0x2EE2B9F6, 0xDBD2638A, 0x53C1B72A, 0x834ECE67, 0x37AE9105, 0x94C12B5F, 0x8A2ECEE2, 0x8DCD8763, 0x21B97CCE, 0x7210B1EE, 0xF701ECE6, 0x97350992, 0x9FF7E28B, 0xFBF4EFE4, 0x5F2AF6CD,
        0xCB175EED, 0x0A725C76, 0x53AF1B69, 0x69CBE77A, 0x77EC124D, 0x61A9304B, 0x0904D6ED, 0x9E2F25D0, 0xBFF3B6C6, 0x5FE0D08E, 0x036015FE, 0x386A1964, 0x09AD0A07, 0xED49DDB9, 0x6354B045, 0x966EEE00,
        0x4926359D, 0xB12A75B0, 0x939E2647, 0x6160FC6C, 0x8D6FB153, 0x1C2814BD, 0x4D5DB10E, 0xE516CDB0, 0x6930BA4B, 0x7F3F8D4F, 0xE65AFA8E, 0x3ED74F64, 0x96827C5C, 0xDCBB134A, 0xBDC5F8C7, 0xDBF58967,
        0xECCA531D, 0x49F042D8, 0xBD526047, 0x7FCBD9B1, 0x4B2A245A, 0x25255CBC, 0xEED87F41, 0x765AA304, 0x10F64BCD, 0xF5D2DD0D, 0x911022E4, 0xEDCC20DD, 0xD0F90AB4, 0x968669D6, 0xD6F57077, 0xF653A296,
        0x0B9B067C, 0xC8484B37, 0x3EED4B82, 0x430C2F7F, 0x32627000, 0x11FBFA07, 0x9B57E292, 0x9A9B90A1, 0x5220C6C7, 0xFD58AA8C, 0x9FF047B5, 0x82633A81, 0xB7F1E0F1, 0x01F68DED, 0x2295818D, 0x306B4BD7,
        0x1398E749, 0x7A477711, 0x4CF5161B, 0x9243548E, 0xA4BB497E, 0xCFB70DBD, 0xCD8648AC, 0x3309787C, 0x972AA2CD, 0x945A10BF, 0xDEC7DD12, 0x0F5FD2AC, 0xAC6936CD, 0xC2456A82, 0x9E121F81, 0xE8F8DAA5,
        0x279B1CAE, 0x17C30F37, 0x9AEF6697, 0x3BFF9CC5, 0x85204345, 0x691D6765, 0xDF5A20CD, 0x4E5FBA56, 0x6753BD68, 0xE5829171, 0xBC75E5FD, 0xFBDF2359, 0xF81CE21B, 0x07D94E66, 0xF4AC0DA8, 0x32C21162,
        0xE54F5009, 0x98321747, 0x07E17036, 0xC87205CA, 0x76AD68A4, 0xBC08119E, 0x05A56128, 0x01A58580, 0x79F852F6, 0x98120964, 0x5399D618, 0xCD965909, 0x001FC151, 0x73522E11, 0x95D76470, 0x4A923879,
    },
    {
        0x4EEBC721, 0x86BCB821, 0xFB9E207A, 0x4553F414, 0x16B9E3BC, 0xAC51CE1A, 0xB2899B37, 0x3D741652, 0x5B90649E, 0x120EB39F, 0xEA3551B6, 0x3A3295D5, 0xEFD7F83B, 0xEA2EEFB7, 0x783D5138, 0xE7AD8E83,
        0x2F2F08C2, 0xF381BDCB, 0x5C015D86, 0x232D1D9A, 0xD2AC02E9, 0x0E74D564, 0x30B1373F, 0x7EF11E16, 0x97427BA3, 0xF3AD9005, 0x3F676F98, 0x256A3AAF, 0xA4A9CABE, 0x646E24A4, 0x9358EA9F, 0x99185C9D,
        0xE440190A, 0x967AC3BB, 0x9E0E5BA0, 0xB5D6AE9F, 0x76ECE5D3, 0x535E7538, 0xC145239A, 0x032FA707, 0xEE20B53D, 0xE46FD583, 0x7463A98F, 0xA3D812B4, 0xDA42C60C, 0x2D6067D7, 0x238730DF, 0xBCC72C56,
        0x079EA21E, 0xA0784BF8, 0x40A28156, 0x93278110, 0x9F0C97A1, 0xC8330DA7, 0xBB312965, 0x529FFB3B, 0xF5A4DA57, 0x7C93FB46, 0xAA4C6853, 0x50FD60BD, 0x263A2113, 0xA2FA0E7D, 0x5A9FFB71, 0x1603B87D,
        0x3797C61D, 0x353A1852, 0x3FEC2020, 0x1FC4D636, 0xC2871F11, 0xE2C86BAA, 0xA2709173, 0xEDC9C72D, 0x524312AB, 0xDEFD0FB4, 0x1AD3BFDC, 0x117EF587, 0x64ABB7BD, 0x172022C2, 0xC9E055FF, 0xCBB7355C,
        0xC5228813, 0x8F38DEA4, 0xC77D2FD5, 0x29360372, 0x2C6D0517, 0xE7B86B27, 0xD11A93A1, 0x59372FC6, 0xAA130FA4, 0x3D323C8F, 0xC6253ADD, 0x8A90703D, 0x478955E4, 0x79DC981A, 0xC9CB13CC, 0x1B3AA568,
        0xF2E17E85, 0x15AF4AD0, 0x012D61C1, 0x3B85B21C, 0x61B6AD60, 0xE656BC1B, 0x8A60F8F2, 0xE2B43E0B, 0x0935D3AB, 0x32F6378D, 0x6EC71259, 0x36DFD19A, 0x00EDA10B, 0x81CA2320, 0x14C85F89, 0x04E68A3D,
        0x354F7AA9, 0xB27B627A, 0xD7209195, 0x73CF6C29, 0x691D123D, 0x12EA78DD, 0x99E32799, 0x27160D2D, 0xF9FF21BE, 0x26F66A1C, 0x93B1ADE4, 0xD479797D, 0xC1A85106, 0xB0EC457A, 0xF6046B6A, 0xA006B8D8,
        0xC01E8801, 0x6EDC63AC, 0x7EA18991, 0x286C108D, 0x97501C7C, 0x32AFF37A, 0xB8B6AD00, 0x85D09F16, 0x12779F29, 0xEEA1F947, 0xA7942FA3, 0x09E2CFDC, 0x5F21A906, 0xF7A7CBE5, 0x80F18546, 0xAB1D04EA,
        0xFF189BC1, 0x74FEEC9A, 0xB736FAFD, 0xB28D4579, 0xCEC04B48, 0x5D395486, 0xB52BD2B8, 0x14A3229E, 0x3F4AE959, 0xAE45508C, 0x3F17B2BD, 0x5450C399, 0x797462BB, 0x31B7A542, 0x83ADA5D0, 0x3EED361A,
        0x450BB4D2, 0xCCBC6B36, 0x8B0BEB05, 0x419A20DC, 0xD4DFFB76, 0xFC036C06, 0x243AD243, 0x991FBF6C, 0x8A9873D6, 0x57CAC201, 0x95378BA1, 0x33B18351, 0xE26DCE26, 0x03558694, 0x9DF72520, 0xA6059FA5,
        0x41CEA5CD, 0x132E3E1A, 0x434316C0, 0x34472EF6, 0xF78BD398, 0x595FE33D, 0x59B24001, 0xF8E090B1, 0xC95C810E, 0x97597462, 0x99FFA68B, 0xB136A4E0, 0xB50AA49C, 0xE7F3BAAA, 0x71E04738, 0xF52FDC38,
        0x8EF05C95, 0x0DA73E74, 0x104A4720, 0x0AD9C4B5, 0x6D5718B6, 0xC9CF00A6, 0x0777A3FE, 0xB2C161F1, 0x8DDB630E, 0xC1BF713A, 0x3CCCF40F, 0x66F33FB6, 0x55EC6DCE, 0xB6A4AEB1, 0x466780DD, 0xD7E9AEEE,
        0xC508BE33, 0x7CE5CA69, 0x9FC50C08, 0x20326E7A, 0x43C17DFD, 0x1A2FBB20, 0x7CADC073, 0x8A56C124, 0x4E38EE85, 0xE8F801DF, 0x3B321CF6, 0xB9859F6A, 0x1902D5DB, 0xF2CA37FD, 0x7499A517, 0x3797600A,
        0x0D6BD20F, 0x6B5F944B, 0xABFC3B80, 0xAA697F9B, 0x897692ED, 0x087491E2, 0x026A01F4, 0xFB6FC4E2, 0x6B2E6220, 0xD311F0B3, 0x5760CC9F, 0xA06011E9, 0x12CB0A45, 0x2E3C8498, 0x7E9F3A9E, 0x6E774E43,
        0x2ADA82BB, 0x8269BCF4, 0x6CD98531, 0x5C850737, 0xC224F0D5, 0x9E55EB41, 0x9B1809F0, 0xA4AD5FE2, 0x8F55B5C0, 0x7DBD1015, 0x6527819A, 0x7FECC9A5, 0x1E572F6F, 0x874E64E3, 0xB691C655, 0x118525D7,
    },
    {
        0x6DF280FC, 0x0ADF543D, 0x3CA40131, 0x4AB1DD75, 0x9E81D8F0, 0x575CB4B0, 0xDFDE5A75, 0x3420F5E9, 0xE77679D9, 0xBE55B16E, 0x45F6885B, 0x597B52B2, 0xB9A2ADF5, 0x4CA3DD67, 0x3C35E218, 0x8B8D1F70,
        0x87842E71, 0xC428BDC6, 0x6154A8A4, 0xFE4F76EE, 0xEB97D18E, 0x2C25E131, 0xFB1D0109, 0x1A752733, 0x0BF057B8, 0x5311E673, 0xCF3309D6, 0xBC88449E, 0xF232A2EB, 0x8005EC31, 0x5EAD848E, 0xEC55FAE9,
        0xE775E9CE, 0x0DBB3CA2, 0x8AE56C38, 0x8C853650, 0x2F4462CD, 0x5DB8F667, 0xC9AA95CB, 0x96E7CD66, 0xF85C9D40, 0xCDD664CB, 0xCE5120DB, 0x669BAE36, 0x1DA871AA, 0x3261061D, 0x31D0A833, 0xC808BB60,
        0xE8E81A34, 0x44888510, 0x34C3F60C, 0x9F312F1A, 0x36ABB508, 0x71B1A86A, 0x68C2FCF7, 0x144C079A, 0x3ECD373B, 0xF85ABA47, 0x6809A015, 0x2D1541F3, 0x61CA6E5D, 0x1D1F595B, 0xA7598B3E, 0xAACBCDC0,
        0xA6B3D54B, 0x448FE340, 0xAC357B0A, 0x2A1AEC8D, 0xC88467A7, 0x437DD25A, 0x69A4FA6F, 0x7326C084, 0xFE58D0C0, 0x9D099C8D, 0xE0107894, 0x7EDE1B07, 0x245432BE, 0x1CBF1BB8, 0x7356BFE2, 0x8A49C47E,
        0xF785BD8D, 0x9FFE148A, 0x1F389585, 0x1D1656E0, 0x3A775DC3, 0x35C1B5F3, 0x386DDECC, 0xB4373846, 0xD1862740, 0x5646C34D, 0xE18FADF2, 0xEFA64A8B, 0xC05244AA, 0x9522BAB6, 0xD56F2EE5, 0xEE8B3C85,
        0x6345428F, 0x3759DAF2, 0x3A92EEEA, 0xF64039F5, 0x3FB0B714, 0x9C487184, 0x5B888DCC, 0x3B5FF1D8, 0xE00D5092, 0x7E1B6528, 0xFC1E983D, 0xACFB2A93, 0x275F7512, 0x271DD13F, 0x94235D6D, 0x1B1049B1,
        0xCADC9E71, 0xEEC732CB, 0xF31EE134, 0x9FABD9D8, 0x63860035, 0xEABF2F06, 0x48025809, 0x5A106622, 0x1709EAB5, 0xC2BA4961, 0x836E8BB4, 0x32AE33A5, 0x2A0FB4F3, 0x950E9FA4, 0xAB287C52, 0x8C053690,
        0xE966AB7D, 0xA533B042, 0x491107D9, 0x01E2617F, 0x3500F5D4, 0xE6BCA777, 0xD456C248, 0xF145CFF8, 0x4E1C0E08, 0xFAC0A562, 0x7F7B7091, 0x2E1D879E, 0xE6D7A76F, 0x5A5A1D89, 0xC9DCC6D1, 0xC98489CB,
        0x9A15F9D3, 0x48004CD6, 0xC6319E75, 0x85CF4A99, 0xFFD5BB44, 0x3DC8B36E, 0xB4A5A48A, 0x4FEA3E0D, 0x9FEB29AE, 0x13B00014, 0x1B63DA0E, 0xC806559D, 0x1D9041FD, 0x58E86E8A, 0x48951975, 0x067E0CFD,
        0x04B34A46, 0x9344D45C, 0x52B7E9C7, 0xA9974E2C, 0x98A15FE5, 0x3B594F95, 0xE10C6F0C, 0xBF12D8CA, 0x14637E69, 0xACE6A159, 0x0B934F8A, 0xBD95E832, 0x972C423A, 0x277E640E, 0xC8513D67, 0x05FFC995,
        0xAAFD25E4, 0x6FE3E69B, 0x0CF5D733, 0xC233A811, 0xB807E5D0, 0x21C9C5B1, 0xD9DB3127, 0x089BE371, 0xE1887A72, 0x4DFAAC1A, 0x8948257B, 0x17D18316, 0x06DED7CD, 0x38996DF5, 0x6E5C414E, 0x894E80C5,
        0x1DFB5A34, 0x58EDC34B, 0xB124498B, 0x0B2BCA2B, 0xAF957887, 0x62A68CCD, 0xDBD116F5, 0x18634F73, 0x94E3FB5D, 0x7747EC80, 0x0325F346, 0xC0FDD194, 0x24924A17, 0xA1614EA7, 0x3B1B377A, 0x3DFB96D0,
        0x8863DDD6, 0x27C60891, 0x3C24183F, 0x87D493E0, 0x7BB3CA5E, 0x53CDD352, 0x26E4F124, 0xAF1D17E7, 0xCB3BFED8, 0x4491FFEC, 0xF6CA1D03, 0x63C26ACC, 0x7C3BD0D1, 0xDFFB4A4B, 0x1C47EDE5, 0x379967FB,
        0x9DA2DCC7, 0x7B43C004, 0x0925B29F, 0xE683B9E1, 0x5C9AF815, 0x08BF7270, 0xE7FA63F6, 0x15EF8413, 0xAF185C79, 0xAC870B0C, 0x3410C1AA, 0x150F2704, 0xC69A09B8, 0xE5030639, 0x3BE36A6C, 0x3E8BDFAA,
        0xEEC2BF79, 0xC53AEF3B, 0x0CC752D1, 0x06BD686B, 0x7E1292C2, 0xE90EDD4D, 0x7BBB04AC, 0xF01A8266, 0x1C6803A3, 0x1C68255F, 0x09897A02, 0x4397E92D, 0xA8C07AED, 0xE2F8EFAE, 0x95FA21AC, 0xA98BE518,
    },
    {
        0xE61D5F79, 0xE0FC1BB0, 0x0CBA49ED, 0x87794FE8, 0x14F942FE, 0x909D0AC6, 0xE4C5BAE5, 0x602C74A5, 0x2251E1D0, 0x52243843, 0x133D4EAA, 0xA6877422, 0x7B211C0D, 0xD35F7035, 0x2D56FF84, 0xF0E8C63E,
        0x84B01DFE, 0x5FF82E77, 0xEB87E3DE, 0x88773413, 0x33770012, 0x27B7740A, 0x85A7C51E, 0x9D29D13F, 0x17B810B5, 0xE72FF91F, 0x6A92641C, 0x7543C0E8, 0x0A438560, 0x27C71910, 0x2B7FFD93, 0x99F3D5DE,
        0x68F05822, 0x39755C57, 0x73109827, 0x7BC06465, 0x9E4796CA, 0xD1DBA716, 0xC083B3E5, 0x4AF08FA4, 0x0B7ED3BF, 0x98114A5A, 0xD1FDB59F, 0x26AAB84B, 0xA5A4F73D, 0x1108AFCA, 0x28430DA5, 0x2FE31455,
        0x7B5B8961, 0x1B29AFBC, 0x1F92E05F, 0x13652957, 0xC69C3BFF, 0x6B1B99CB, 0xE67B4AC3, 0x180D9F91, 0x195D9CD8, 0x814CF398, 0x82FE1CEE, 0xC0637591, 0x401589C8, 0x4311A564, 0x38442BD3, 0x2C158DBC,
        0xD1A1885F, 0x38F450EA, 0x162814E0, 0xA173DC59, 0x2A9D6C6B, 0x25BEA163, 0x92CB0843, 0xE809F481, 0x4BEDCB5B, 0xABE2AECD, 0x3EE658A6, 0x770B83E3, 0x0EF5BFA7, 0x7D976EB9, 0x1B85461F, 0x954798A4,
        0x94BAC5B6, 0xDE02B0C5, 0xCF8722BF, 0x163947A7, 0x71803B4D, 0xFAC72E9B, 0x536E861F, 0xE071A459, 0x734AB9AB, 0xA61A4996, 0x532F7654, 0x4F19FA56, 0x3419D7F8, 0xB3B3E830, 0x1E0F2C7D, 0xD8A74870,
        0xD1F790B0, 0xFFC6F8A8, 0xF273EA6A, 0x6EB807A5, 0xE4362266, 0x7CF75CE8, 0xE9C65C66, 0x1A5CDC0A, 0xFAF467FE, 0xCCFB7966, 0x32734AEA, 0x17CBBD15, 0x76748FDF, 0x122EAFBC, 0x4FAD75F4, 0x0B2F2299,
        0x3984C31D, 0xE94FF4EE, 0x83EBC361, 0x194CFBE1, 0xF87A597F, 0x91E21305, 0xAA8D1FC8, 0x83A4B3F1, 0xEDE1313F, 0xAA0CE4B6, 0x74CC4ED8, 0xB7706957, 0x09F71712, 0xC3F803EC, 0x3DEE9347, 0x42E4E5E2,
        0x0DC49DF2, 0x6ADDF02D, 0x9A27412D, 0xAD62F5D8, 0xE6BB2FCF, 0x4EE39FA6, 0x4DC2B1FA, 0x5687E695, 0x21E89AC0, 0x0E2B473E, 0xE8E40E85, 0x240EE0FD, 0x8CD5DE49, 0xBF7EA92B, 0xF1FAC64E, 0xE7222E1B,
        0xDA9078C1, 0x9A3BF8E9, 0x201B4009, 0x04FF55B4, 0xFE87FB01, 0x932670A2, 0x61B633EB, 0xBBB1F286, 0xE002BE9E, 0x7A0B359B, 0x3D79A971, 0x652A9043, 0x132D101D, 0x6A24370A, 0x845644B9, 0x1E647E69,
        0x2BF9F51E, 0x88FB7141, 0x6D757191, 0xD18C7AFA, 0xA47C6361, 0xCF4D1AC1, 0x5BF80839, 0x2CB187AD, 0x61427602, 0xF84456E2, 0x50F2FF83, 0xF57FAE77, 0x1D384C9B, 0xC6AD591D, 0xE46F1287, 0x15B84A38,
        0xF7FBFBFC, 0xB4EDE990, 0x6144C99B, 0xBBF94FEC, 0x42C8CE00, 0x02BF691A, 0x9B54D96F, 0x3EDC3AAD, 0x7239887D, 0x2CD7F175, 0x6322389D, 0xFB54E0E7, 0x0BF5B6F1, 0xDA06A1DD, 0xA610A480, 0x7DDB6621,
        0xCBFC5D68, 0x84699C5C, 0xAB135768, 0x1C099C50, 0x4350DFC7, 0x32551CC6, 0x1ECEA3A6, 0xC1FDB252, 0xF3E3CD14, 0x0ACA9C84, 0xDCA29E79, 0x59C5BA87, 0x92659DC3, 0xBE0241E0, 0x0EE6B7E0, 0x36C4A405,
        0xB1014570, 0xCC41FA89, 0x35ED7081, 0x6A03191A, 0x8CE7910D, 0xDF10B6E8, 0x67192A54, 0xEE86FE67, 0xE74A9D74, 0xA647AE91, 0x053D50AD, 0xE6DA5D71, 0x7A3F1284, 0xF3D0EA7D, 0xE2DB1362, 0xEA772569,
        0x243B9E0E, 0x4B997A93, 0x35FD9166, 0x54C4D255, 0xF883E09D, 0x0FE5D2B4, 0xFD66BECB, 0xB572F7F4, 0x4E5A500B, 0x948D87D7, 0x19A370F1, 0x51A66520, 0x99A4F7F9, 0xB0286E7A, 0xEC7BDEE5, 0x960E5B38,
        0x8DF80A51, 0x7CD48450, 0x858C64FD, 0xC8164C9D, 0xB6476367, 0xE3EBDF63, 0x5943BBCD, 0x6279741C, 0xF3E96F2D, 0xF1682406, 0x4789458F, 0xFF89FE11, 0x8DC3C948, 0x8D8E60D8, 0x7DA04CDD, 0x8295B235,
    },
};

static uint32_t F(uint32_t leftHalf)
{
    uint8_t box0 = (uint8_t)(leftHalf >> 24);
    uint8_t box1 = (uint8_t)(leftHalf >> 16);
    uint8_t box2 = (uint8_t)(leftHalf >> 8);
    uint8_t box3 = (uint8_t)leftHalf;

    uint32_t a = sbox[0][box0];
    uint32_t b = sbox[1][box1];
    uint32_t c = sbox[2][box2];
    uint32_t d = sbox[3][box3];

    uint32_t out = a + b; // Modulo not neccesary due to overflow being removed due to the size limit of uint32_t
    out = out ^ c;
    out = out + d;

    return out;
}

uint64_t EncryptBlock(uint64_t block)
{
    uint32_t leftHalf = (uint32_t)(block & 0xFFFFFFFF);
    uint32_t rightHalf = (uint32_t)(block >> 32);
    uint32_t temp;

    for (size_t i = 0; i < sizeof(pArray) / sizeof(*pArray) - 2; ++i)
    {
        switch (i)
        { // version7
        case 1:
            temp = pArray[3];
            break;
        case 2:
            temp = pArray[4];
            break;
        case 3:
            temp = pArray[1];
            break;
        case 4:
            temp = pArray[2];
            break;
        default:
            temp = pArray[i];
            break;
        }

        leftHalf = leftHalf ^ temp;
        rightHalf = F(leftHalf) ^ rightHalf;

        temp = leftHalf;
        leftHalf = rightHalf;
        rightHalf = temp;
    }

    temp = leftHalf;
    leftHalf = rightHalf;
    rightHalf = temp;

    rightHalf = rightHalf ^ pArray[sizeof(pArray) / sizeof(*pArray) - 2];
    leftHalf = leftHalf ^ pArray[sizeof(pArray) / sizeof(*pArray) - 1];

    return ((uint64_t)rightHalf << 32) | leftHalf;
}
uint64_t DecryptBlock(uint64_t block)
{
    uint32_t leftHalf = (uint32_t)(block & 0xFFFFFFFF);
    uint32_t rightHalf = (uint32_t)(block >> 32);
    uint32_t temp;

    for (size_t i = sizeof(pArray) / sizeof(*(pArray)) - 1; i > 1; --i)
    {
        switch (i)
        { // version7
        case 4:
            temp = pArray[2];
            break;
        case 3:
            temp = pArray[1];
            break;
        case 2:
            temp = pArray[4];
            break;
        default:
            temp = pArray[i];
            break;
        }
        leftHalf = leftHalf ^ temp;
        rightHalf = F(leftHalf) ^ rightHalf;

        temp = leftHalf;
        leftHalf = rightHalf;
        rightHalf = temp;
    }

    temp = leftHalf;
    leftHalf = rightHalf;
    rightHalf = temp;

    rightHalf = rightHalf ^ pArray[3]; // version7
    leftHalf = leftHalf ^ pArray[0];

    return ((uint64_t)rightHalf << 32) | leftHalf;
}

}; // namespace Blowfish
}; // namespace TTH