#include <inttypes.h>
#include <stddef.h>

namespace TTH
{
namespace Blowfish
{

constexpr uint32_t pArray[18] = {
    0xDEEE7C53, 0xE8F89C8C, 0x529E621F, 0x41B46B2E, 0xCDC0C465, 0xDCC634BA, 0x9AE19B52, 0xE16CBBF7, 0xAA37BCA7,
    0x8F2D3804, 0xCBB695F7, 0x0E7941B7, 0xDDC0E582, 0xBE99A9A8, 0x824A846D, 0x9083579B, 0x601EA06D, 0x2AD60B50,
};

constexpr uint32_t sbox[4][256] = {
    {
        0x19C71116, 0x5535BCE4, 0xFC0986F5, 0x60A6E965, 0x32BAEED6, 0xC668AF0D, 0x9813FDEC, 0x3472AA67, 0x48F3E4CA, 0x4D9BB606, 0xED240D60, 0x419E3A88, 0x1BA4A1C4, 0x8165C4EF, 0x52D2D37B, 0x4C9E659E,
        0xA625F22A, 0x14E63844, 0x4854B3AF, 0xF9197842, 0x5FD4BF92, 0xA1392A35, 0x254B15F0, 0x836A30E7, 0x4016B3DC, 0x25E769F0, 0x8FE261EA, 0xD5115F05, 0x9C24A2E9, 0x3DE9577F, 0xD3DAF3CB, 0x660A11CA,
        0xCFFCD91D, 0x71A09487, 0x3B73CE88, 0xAA2D1ECC, 0x7878683B, 0xAC1C062A, 0xAC4C267D, 0x4F44EA98, 0xBE75687F, 0xB8A027D4, 0xAF63D18C, 0xD5245696, 0xF1BCC572, 0x4D08D3AF, 0xBD3B2008, 0xF56C7670,
        0xA769C422, 0xF41D79FC, 0x0F6AB120, 0x582DA23D, 0xAEEF4593, 0xD2F56F4C, 0x0D5E3D38, 0x0F36C868, 0xF645AF5A, 0x391CA8FF, 0x63428B74, 0x02266861, 0x5F95306E, 0x2D729FBF, 0x21DA17F4, 0x247B5944,
        0x2AFF7DED, 0xD39F5E1D, 0xE71F247B, 0x639CBFCB, 0xF1351C06, 0xBF343DE0, 0x938C1D52, 0xFFF5BD36, 0xFC45CEE4, 0x83A8E28E, 0xFA13678E, 0x946911EE, 0x52C6ADF4, 0x1767F542, 0xD8B24F3E, 0xBF5AF144,
        0x3339ED53, 0x4170130B, 0x4DA55119, 0x105B1E88, 0x0E37AE0A, 0xF2792193, 0xC734C8E0, 0x26AA0470, 0xF55655CF, 0xDA634138, 0x0577CA17, 0xEF59105D, 0xEF2912B0, 0x78134901, 0xF810B3A7, 0x27979E71,
        0x8D7965E4, 0x86A878DD, 0x70F35E3F, 0x61D5424D, 0x682AD884, 0x5636C022, 0xDA86EE66, 0xC8D6B178, 0x5B294DDB, 0x6DF3725B, 0xCE484592, 0xAFFD74C3, 0x9725C266, 0xB6E686FD, 0x746E3522, 0x2E2C0658,
        0x9105D4B5, 0x24558FE2, 0xD7A09807, 0xB33703A8, 0xA3067136, 0x348EF1B4, 0x4FF82E51, 0x90FCEB28, 0xF945C85C, 0x4BFF6995, 0xE3089BB9, 0x0A496353, 0x4AC6875B, 0xB8FFB6B7, 0x7741D9F9, 0xAA272B15,
        0xA228D2CA, 0xEBCE092E, 0x04972724, 0x05F4587A, 0xEE1EDE89, 0x52525131, 0xE9B7E885, 0x9D7FACB6, 0x4249A113, 0xA804E433, 0x6F7A4288, 0x715747E1, 0xB4F3DB6F, 0x85995050, 0x1BB525F5, 0xA6F54B30,
        0x34C9D292, 0x0BFFB047, 0xCDA4E8E7, 0x8ECBD391, 0xD4D60E20, 0x52E18473, 0xEC13A060, 0x2E7E6BD1, 0xB4724082, 0x0216E4D1, 0x36327AA3, 0x334F44F4, 0xAF0EEE5C, 0x564D57CA, 0x2A974B6F, 0x8C82699C,
        0x7C38FD33, 0x421C56A5, 0x8EA61C95, 0xB5CDE350, 0xD90E62BB, 0x3B70B8CF, 0x86164D1C, 0x0DEA5DFC, 0x857C148C, 0x50A3F7E8, 0x2B223E12, 0xF134050F, 0xB2B897D2, 0x0F119569, 0x51A07FA0, 0xA6120E99,
        0xE2C1BF93, 0x1D935FD3, 0x72644D54, 0x0DAA863A, 0x704D5BC5, 0xE21535F3, 0x338A5DA4, 0x1719F0C4, 0x3E3381E1, 0xBAA93C6B, 0x949B4974, 0x9AC8BB00, 0x471804F1, 0x411722D1, 0x2493B419, 0x467F1179,
        0x69200954, 0x55C88ECE, 0x5D2934AD, 0x70180AAD, 0xB2A13F02, 0xE348A93A, 0x0009C30E, 0x721D7298, 0x41984B91, 0x8FCDA116, 0xBF1C8463, 0xF315527D, 0x7D5385F2, 0x690272A5, 0xD3C5A59A, 0xC97E9826,
        0xBB38ED27, 0x9B07D304, 0xDAD1F865, 0xF716A05F, 0xD055521A, 0x80BF8879, 0x982A6485, 0x40052F55, 0xF8EE2D33, 0x9C9C3F87, 0x535D5DA0, 0x7E2C7B37, 0x44F06803, 0x2791E2EE, 0x449AE6E3, 0x52BABE54,
        0x30F93C93, 0x0C17C688, 0x0BAE7958, 0x55836576, 0x2BA634B8, 0xDD6DD9D5, 0xA7726496, 0xFE64C778, 0x67F25143, 0x2028DEF0, 0x641B6FE1, 0xA7473634, 0xB57C043C, 0xB0E81DC4, 0x9EB31A4F, 0xFD57DB2C,
        0xC38F4C81, 0xF8C2393D, 0xD24F520D, 0x96CE089D, 0xBEC87D25, 0x372FFF45, 0x15206F59, 0xB7A08140, 0x988F83EF, 0x0029AF54, 0x9712D058, 0x115E6E8C, 0x3F14D38A, 0xB3149526, 0xCBCE3F05, 0x10C47D2B,
    },
    {
        0xC26E003C, 0xB2613F91, 0xA80E9901, 0x140417CC, 0x87F6D038, 0x3D10AF4B, 0xC55B6DCE, 0x2DDAF73C, 0x57BBA95E, 0x57526F82, 0x450337F4, 0x2576C84B, 0xC9B3B39D, 0xC6116885, 0xB8C13698, 0xD44C5D0D,
        0x96C21B1B, 0x0823DE53, 0xC4AAED2D, 0xA2FD5035, 0x890379CA, 0xD8FC323C, 0xBDEA62AD, 0x09575D79, 0xB9433C6B, 0xE0EB1950, 0x00240627, 0x0785DEC1, 0x719A9662, 0x5486E842, 0x1B561C3F, 0x64854A28,
        0x8A5BCDC5, 0x1FEBCA45, 0x6545CD4C, 0x5EBD1791, 0x62E4B271, 0x97177DBD, 0x75D0240E, 0x70D9AB29, 0x5DEDA6BC, 0xB3E114AE, 0x03108E83, 0xC23C3EE5, 0xC1065E65, 0x39FAFBEF, 0x9F869C8D, 0x46EBB70E,
        0xFFE46E04, 0x118E0944, 0xD1C5C525, 0x0AED474F, 0x74CE05FA, 0x0A148E06, 0xEF495913, 0xD010A75A, 0xC1A7BEFA, 0xB5F50865, 0xC51AAD66, 0x9BEE7369, 0x9497A644, 0xCFF48549, 0x6F2BCFAB, 0xD0F8A2B8,
        0xEAE99944, 0x9A4C0819, 0xB2AAC651, 0x9062B085, 0x005011F0, 0x3038A117, 0x3E4D979F, 0xD27AF0FD, 0x2CB272DC, 0x1FB55C85, 0x2F3EF427, 0x1FFF5BF6, 0xDE97D7EC, 0x378A7BB0, 0x640D1FB6, 0x0098A15F,
        0xE1FBA1EF, 0x3B7D2885, 0x39B0C9C9, 0xD1870395, 0x14847AA5, 0xEF99CF53, 0x00457AE8, 0xB7388AAC, 0xCDFF5A58, 0xBFC5630B, 0x592D0C76, 0x40BF6B0C, 0x2876F6E9, 0x1883C01B, 0x65782021, 0x07FA6B9F,
        0x34AF69FB, 0x57DDC53F, 0xCD48B2A0, 0xCA4BE74F, 0xE81DA78E, 0xB6D113AC, 0x366E1A75, 0x78DAB7A3, 0x61192676, 0xD7059D85, 0x2A6D2792, 0x10067096, 0x0ABB2453, 0xD255E699, 0xFC9959DD, 0x599799F6,
        0x47626607, 0x2F1CD8F7, 0x35EAE0EC, 0xABCDDD5E, 0xADEA82AD, 0xEB73E0B2, 0xE31F20B9, 0xE9A5F84F, 0xDB18C5CD, 0x20850485, 0x1D1E67ED, 0xE53C56FF, 0x0DA14A61, 0x90D07F76, 0x6108B521, 0xA7F6C6FD,
        0xF99738C8, 0xF9065BFC, 0x1C79CA39, 0x89CB7D8D, 0x5BBCBAB4, 0xD68FB799, 0x143F4463, 0xDC56F535, 0x5D93530A, 0xA3398A64, 0xA659F22A, 0x0893EC9D, 0xA9E93CF5, 0xFF0E96E2, 0x9C80ABB6, 0x05156AFE,
        0x7C91E848, 0x93739567, 0x5E4057A4, 0x8CBF9581, 0x48AE434E, 0xCDACF1EE, 0xB281B3DB, 0x88F6A2A7, 0xF9303209, 0x683FB8C7, 0x27D79FDD, 0x5B17A6FD, 0x8C879C75, 0x9E214ACB, 0x4D541EAD, 0x8AFFB9DC,
        0x89A66F1A, 0x615A86FA, 0x74AE32AB, 0xB5145D8D, 0x478BCCCC, 0x758C9E0E, 0x8FBBF7FF, 0xF103C65F, 0x380644F9, 0x6B49E644, 0x8AB8C4B6, 0xCE501485, 0x1FBB01BD, 0x1571AC12, 0x497B50F7, 0xA2FA298D,
        0x533EEA69, 0x88D07C6F, 0xE8CD962D, 0x0E304C30, 0xB389A4FE, 0x4F2F842C, 0x32F769F9, 0xC4084A67, 0xD7B76934, 0x29A90FF1, 0x4A554DF5, 0x23AA20FB, 0xC669CA1E, 0x1A4052C2, 0xD943C20B, 0x96E8CA13,
        0xF67A2802, 0x9719C43C, 0xA171FDB9, 0x7A5D065A, 0xCE04715C, 0xDC1C53BC, 0x656F0D53, 0xBB5B007E, 0x9DF5B72F, 0x85BEF04C, 0x2911289C, 0xAC933212, 0x98BC6F75, 0x984F04CF, 0xC363FE46, 0xABA987E6,
        0x5A0D68C0, 0x538F8212, 0x857B796A, 0x961E0277, 0xE40F7D0F, 0x1295DC46, 0x1CE69184, 0x5B19A209, 0xE745F530, 0xF53A0C84, 0xD6D737BF, 0x599C8CB9, 0x78E595E3, 0xCEB31F98, 0x4EA91C23, 0x6BF7B059,
        0xCD0F2D75, 0x3A580961, 0xCE85E1B1, 0x460A986F, 0xC70F43DD, 0xB18D776B, 0xDDE801A7, 0x3C6D3865, 0x112995E3, 0x08FD25A5, 0xEB333F7E, 0x3ECCAA34, 0x7DC4348A, 0xAD3DE091, 0x2CA978B5, 0xFC8034E5,
        0x876F3665, 0xFA1EFF6C, 0x7E54D8EC, 0x15E5C331, 0xEAE2A78D, 0x74711BA8, 0x1D6D5B39, 0x4FF45D50, 0xD2BB0E6F, 0xFA0F9161, 0x3F248D7A, 0x21C43AA0, 0x74CF29BA, 0x3AFC11A1, 0x7BA4A536, 0xE092A719,
    },
    {
        0x539DD3BF, 0x26B8FC8D, 0xE0065F83, 0x06F8F809, 0x7220FDFE, 0x3D8658A2, 0x03818427, 0xF920819C, 0x722A3838, 0x55E6B59A, 0xB931D77F, 0x1B01A477, 0xD61F81CD, 0x19211169, 0x3EBBB275, 0xFC2831FD,
        0x1374D84C, 0xFFB0D58C, 0x9B7DB4E8, 0x33358D9A, 0xDB95778C, 0xD083B6B3, 0x3FA9CB78, 0x0DB53BFD, 0xAFC12866, 0xB25739F2, 0x2F1F021F, 0x47D7599E, 0xE5C9C3FB, 0x266DCE02, 0x7019840E, 0x3EE08EA4,
        0x30273665, 0xFC791521, 0x138E97D1, 0xBE88412C, 0xC160AF48, 0x8F2A68B7, 0xBADDFAE5, 0xAE6088A7, 0x5652DB22, 0x04DB4381, 0x2A29F523, 0xE46E4E67, 0xFF9103B1, 0x0AF9A9B3, 0x0EA02AA8, 0xDE60D831,
        0x8860D5D7, 0x82DCCD6E, 0x01859B3F, 0xCBE9A1EB, 0x2B124F82, 0x18B113F3, 0xAEBD17E9, 0x025ACA6B, 0x6B544176, 0x7A4D3055, 0x5E79B684, 0x325612E0, 0xAF6E8BEA, 0x5C415A51, 0x88027158, 0xBFD6833A,
        0x0CCB5310, 0xC473A0BF, 0xB00426A3, 0xD2897DEB, 0xF2F9BBCC, 0x5E505743, 0xCC0F9BC3, 0x59619A35, 0x0257A070, 0x38E0529C, 0x9B61A1AF, 0xC710BB29, 0x6A9B0813, 0xB7651048, 0x2B9BB0ED, 0x1362FD80,
        0x0D905D24, 0x788E073C, 0x5DA8FE55, 0x54D78E32, 0x778B234E, 0x485965C7, 0xE9D85CCB, 0x6C2EB594, 0xB53E744A, 0xAF1C7AB8, 0xC7CD9BE8, 0xCCB83803, 0x65D56817, 0x9C75E5A8, 0x84C5DFB8, 0xC88825D4,
        0x1A73CF79, 0x4FF34713, 0xB558CC2F, 0xD230564C, 0x87E4E073, 0xA05DDD79, 0x5A8802DC, 0xF50321B7, 0x102E272D, 0xE3DE8D13, 0x3FE92E08, 0x68DC5F76, 0x80338145, 0xE75ACAD1, 0x2624C2DE, 0x6A572825,
        0x427DA2E2, 0xD3FBF9CF, 0x565BDDBF, 0xE84DED90, 0x7B1B0356, 0x6964ECE8, 0x1473BB7D, 0xD2F7E41C, 0xB96F70D5, 0xDF7FF0AC, 0x80504D47, 0x3AE37A06, 0x5CA0CCB5, 0x796F8449, 0xCFAF6055, 0x5EE942D9,
        0xE948D8E4, 0x55F1159D, 0x1CEB7A99, 0xADBF4E2D, 0xE1EC0722, 0xB6A26708, 0xD417FBF6, 0x9C0A0556, 0x4C8628C4, 0x5243B5BD, 0x4C27316F, 0x164D1E3C, 0xD0A14719, 0x86614E34, 0xA392E6CF, 0xA8CCF093,
        0x96ACBF4F, 0xB96493BE, 0xF6E488BF, 0xCC88C0B5, 0x440DD2D9, 0x0485260D, 0x13FCF603, 0x9668E37D, 0xC5E53E18, 0x00016907, 0xF2C9715D, 0xEE8C4CC6, 0x3F67917D, 0x56843437, 0x0D5A2E39, 0x8ABEF648,
        0x22AAD4D8, 0xA0D135B7, 0x9D1684A7, 0xBCA03CE3, 0xCA604938, 0xDB1DAD19, 0x6EF39D16, 0x9FAE8934, 0xD7B731AB, 0xDA6AA73F, 0x8E8CAC9C, 0x6F33EAE1, 0xF37CEEA8, 0x28D96A36, 0x627D6DB0, 0xDF54AB7B,
        0x4CE1751E, 0x8EA2997C, 0x26842DAD, 0x19377328, 0xB8BC14B9, 0xA5F4CC3C, 0xED966D19, 0xE38D7433, 0xA7A15867, 0xCCCC2900, 0x5AE3D1FB, 0x2443CEBC, 0xD44941DC, 0xF66C626B, 0x450F1D8F, 0x2D1B519B,
        0x2DCF62C9, 0x5FCD9D1E, 0x1EEF4090, 0xAA9CBAAF, 0x1018DED4, 0x4569A58F, 0xDA9AB93D, 0xF9F76457, 0xE21B5B18, 0xDE378616, 0x39EF5D7A, 0x556DAECD, 0xB7B756F6, 0x7824326D, 0x1BD45BBF, 0x1CCA57BB,
        0x113D4876, 0x076273DD, 0xF6EC8B5F, 0x281A3100, 0x493DA21F, 0xBEED83F4, 0x6ABF3201, 0x6D4AB232, 0x6AE89772, 0xE87C9A5C, 0x3BE17DB3, 0x36A501C0, 0xC3C28620, 0x54FCA1B7, 0xDC11060D, 0x252F76F0,
        0x07112D05, 0xE15D5FBC, 0x397D1F8C, 0x14F15DA6, 0x14B16B23, 0xEC72D816, 0xDC8C4B02, 0x596DCE17, 0x8C228AA2, 0xFFA1E185, 0x1045F785, 0x496E9113, 0xA67F0A4A, 0x84AC8C5C, 0x2BFA6663, 0x90E69758,
        0x2B5262E4, 0x8ADD8E77, 0x828A1875, 0xB5C8EEA7, 0xFC0AD005, 0x97471A66, 0x3DDCE92E, 0x80E33C62, 0x30D81767, 0xD5272A9E, 0x2F112566, 0x07308120, 0x5087700D, 0x0314796B, 0x2D64C732, 0x5ED74FA6,
    },
    {
        0xC85415FB, 0x271716ED, 0xFD5BB085, 0xBDBEE554, 0xF7ABA5C3, 0x1D30B664, 0x799FD245, 0x01408345, 0x77E37545, 0xB437A75E, 0xAEC77C2F, 0x485B491E, 0x4D25DB12, 0xD4BFF90D, 0x2865CCA2, 0x0AFCE9B9,
        0x564CE9D1, 0x4884015C, 0xCAAE79D2, 0x62FB3593, 0xB66A51EC, 0xB81F8A66, 0x3FCA1138, 0x4480E4FA, 0xB5451B0A, 0x83DB17E3, 0x769F09B7, 0xAC2CC57B, 0x7940B4F8, 0x12DDE842, 0x75129DB1, 0x289283A8,
        0x2F2EFF6A, 0xAC4A181D, 0x08B3205F, 0xF6944EF0, 0xAFA10D22, 0xE311F899, 0xB4C84D15, 0x98D4782C, 0x96B2C5E7, 0x8207B11D, 0x0116D233, 0x6679DB09, 0x30EA2B46, 0x0DD3CDEE, 0x3204F4BD, 0x5EE24AB6,
        0x3CC2FEB1, 0x600D164B, 0x83A019E5, 0x528002FB, 0xB4ED74F8, 0x54B6479D, 0xE76672D0, 0x808CE2B4, 0x5EF57ED9, 0x21CFE8F9, 0x2886CD4B, 0x661C0E12, 0xEF6AB4D9, 0x3B1E5D37, 0xEE340C2C, 0xC82E0304,
        0xBC82331F, 0x59524118, 0x70D8760B, 0xCD91FF3E, 0x44B179E8, 0xD59E48A7, 0xAF538AB7, 0x6E7EE7E4, 0xED468C52, 0xEEF2908D, 0xF6747758, 0x8A11DD5A, 0x74609D72, 0xB869882C, 0xA396A1DD, 0x1FD7D2C7,
        0xFA1DBC32, 0x6632E863, 0x41EDD2E6, 0xF3EEA317, 0xBFA390E4, 0xBC089E29, 0xA72669F2, 0x50778FC5, 0xA1636832, 0xD537D23B, 0xE899D7C4, 0x6021E106, 0x70D36791, 0x84949B0B, 0xFC200A4B, 0xA7A52254,
        0x9106F7B2, 0xE33C1828, 0x64C7A454, 0x145B585E, 0xAA13B891, 0x6F30C0DD, 0x339DACE3, 0xA338502C, 0xA8DAD651, 0xA769DE8E, 0x37913529, 0x059CB095, 0x59BC4999, 0x7A0DC54D, 0x23575FA4, 0xF68F30BA,
        0x4C1B9D23, 0x70F37537, 0xD980AFE6, 0x9850C582, 0x715280FB, 0xF8F67E0F, 0x7728AF4D, 0xE3B0DEF1, 0x77D3C137, 0x34CCCACA, 0x99857402, 0x520ECC3F, 0x83F4BBA8, 0xF5FE6E6E, 0x491080CD, 0x592746C0,
        0xB526552B, 0xB0911532, 0x45A13C52, 0x26140B5B, 0xFCD765B7, 0x1E9748FE, 0x6214F96C, 0xC4769D6B, 0x42D4E362, 0x498831F0, 0x479AF47B, 0x45FF4D77, 0x583BAD88, 0x31BADC97, 0x17A56A69, 0x8273DDDD,
        0xB7FA9E7A, 0x887607D8, 0x3219CEC7, 0x494C4526, 0x5BC765E5, 0xC4E7776F, 0x1F306D70, 0xD128BBF7, 0xB2F1FD5A, 0x96B56CA8, 0x1F2C91BF, 0x39969F4F, 0xCB5A893C, 0x8C652AA3, 0xCF811CFC, 0xB0C64013,
        0xD0905380, 0xD31D09B7, 0x7EEE8044, 0xC05721DD, 0xB989DFE0, 0x4C747F19, 0x177CB88E, 0x010B6C51, 0xAAC7FCB3, 0x96E9DA90, 0x3EDC2EF1, 0xEC88D70C, 0xB5A91415, 0xDF2D78AD, 0xA1A35B37, 0xB790C858,
        0xB1912B68, 0xE05236CA, 0x3D37EA00, 0x320A2ECD, 0x2E1D84C1, 0x17B5B513, 0x2089FEF6, 0x491FAD25, 0x2BAC27F3, 0xD207C16C, 0xEC8CA728, 0x684E3509, 0x4872D0B7, 0x31DD49B4, 0x6081ADB6, 0x48B079AC,
        0x6536112A, 0x4187805E, 0xF08E39FF, 0x11597729, 0xBFF59403, 0x4BD9EC5B, 0x81F62AA7, 0x7A13F446, 0x8C0BE907, 0xBA8407A9, 0x6B9E9015, 0xDB802D59, 0xFCE76A3F, 0x1594AD42, 0x0763F0D8, 0x93A43786,
        0x9E18B679, 0xEE1A9121, 0x2845D15D, 0xE5BC9516, 0xB7557890, 0x27EC9A6B, 0x5945DE40, 0xD88DBD4F, 0x773A140C, 0xB5BF5C1E, 0x9FB3F0A9, 0xA71392ED, 0x76202E4D, 0xA709A02D, 0x3AEBCCF6, 0xA4CB6FE1,
        0x0D1A374F, 0xAF5351DB, 0x916543FF, 0xB9EA4165, 0x539A3B39, 0x315BFB20, 0x58E49AC6, 0xC4474898, 0x30C140EE, 0xF17316B4, 0x253A5D48, 0xA5084317, 0x1533F999, 0x3E75236F, 0x7336129D, 0xC612A6A8,
        0xFF814C68, 0x9476D2FF, 0x6DF38434, 0xD1852036, 0x06E6DFC9, 0x8A2857ED, 0xAFA812B7, 0xF46ED016, 0x249C195E, 0x6B4ABFED, 0xE7275E61, 0xDF1814CD, 0xDF02DA4F, 0xF39B367C, 0xE0BEA21F, 0xB72D7144,
    },
};

static uint32_t F(uint32_t leftHalf)
{
    uint8_t box0 = (uint8_t)(leftHalf >> 24);
    uint8_t box1 = (uint8_t)(leftHalf >> 16);
    uint8_t box2 = (uint8_t)(leftHalf >> 8);
    uint8_t box3 = (uint8_t)leftHalf;

    uint32_t a = sbox[0][box0];
    uint32_t b = sbox[1][box1];
    uint32_t c = sbox[2][box2];
    uint32_t d = sbox[3][box3];

    uint32_t out = a + b; // Modulo not neccesary due to overflow being removed due to the size limit of uint32_t
    out = out ^ c;
    out = out + d;

    return out;
}

uint64_t EncryptBlock(uint64_t block)
{
    uint32_t leftHalf = (uint32_t)(block & 0xFFFFFFFF);
    uint32_t rightHalf = (uint32_t)(block >> 32);
    uint32_t temp;

    for (size_t i = 0; i < sizeof(pArray) / sizeof(*pArray) - 2; ++i)
    {
        switch (i)
        { // version7
        case 1:
            temp = pArray[3];
            break;
        case 2:
            temp = pArray[4];
            break;
        case 3:
            temp = pArray[1];
            break;
        case 4:
            temp = pArray[2];
            break;
        default:
            temp = pArray[i];
            break;
        }

        leftHalf = leftHalf ^ temp;
        rightHalf = F(leftHalf) ^ rightHalf;

        temp = leftHalf;
        leftHalf = rightHalf;
        rightHalf = temp;
    }

    temp = leftHalf;
    leftHalf = rightHalf;
    rightHalf = temp;

    rightHalf = rightHalf ^ pArray[sizeof(pArray) / sizeof(*pArray) - 2];
    leftHalf = leftHalf ^ pArray[sizeof(pArray) / sizeof(*pArray) - 1];

    return ((uint64_t)rightHalf << 32) | leftHalf;
}
uint64_t DecryptBlock(uint64_t block)
{
    uint32_t leftHalf = (uint32_t)(block & 0xFFFFFFFF);
    uint32_t rightHalf = (uint32_t)(block >> 32);
    uint32_t temp;

    for (size_t i = sizeof(pArray) / sizeof(*(pArray)) - 1; i > 1; --i)
    {
        switch (i)
        { // version7
        case 4:
            temp = pArray[2];
            break;
        case 3:
            temp = pArray[1];
            break;
        case 2:
            temp = pArray[4];
            break;
        default:
            temp = pArray[i];
            break;
        }
        leftHalf = leftHalf ^ temp;
        rightHalf = F(leftHalf) ^ rightHalf;

        temp = leftHalf;
        leftHalf = rightHalf;
        rightHalf = temp;
    }

    temp = leftHalf;
    leftHalf = rightHalf;
    rightHalf = temp;

    rightHalf = rightHalf ^ pArray[3]; // version7
    leftHalf = leftHalf ^ pArray[0];

    return ((uint64_t)rightHalf << 32) | leftHalf;
}

}; // namespace Blowfish
}; // namespace TTH